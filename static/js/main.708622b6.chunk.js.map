{"version":3,"sources":["stores/glyphs.js","stores/MainStore.js","components/Timer.js","components/Select.js","components/TopBar.js","components/Tile.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["glyphs","glyph","match","MainStore","easyGlyphs","slice","length","hardGlyphs","currentGlyphs","_","shuffle","this","currentlyComparing","tilesSelected","moves","time","timeInterval","timerStarted","matches","allMatched","enableDifficultySelection","timeStamp","Date","now","initNewGame","difficulty","arguments","undefined","_this","clearInterval","gameWon","startTimer","setInterval","selectTile","selectedGlyph","push","delay","forEach","item","idx","decorate","observable","toggleText","action","stores_MainStore","Timer","min","sec","seconds","concat","react_default","a","createElement","className","convertTime","props","Component","inject","observer","Select","state","value","handleChange","e","target","setState","disabled","onChange","TopBar","components_Timer","Math","floor","components_Select","Tile","revealed","reveal","prevState","_this2","hiderevealed","setTimeout","onClick","GameBoard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","xDir","yDir","centerX","centerY","getMouseData","clientX","clientY","computePosition","transform","el","offsetLeft","clientWidth","offsetTop","clientHeight","addEventListener","throttle","ref","div","style","components_TopBar","map","glyphObj","components_Tile","key","App","components_GameBoard","Boolean","window","location","hostname","Root","index_module","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.708622b6.chunk.js","sourcesContent":["export default [\n  {\n    glyph: 'key',\n    match: false\n  },\n  {\n    glyph: 'glass',\n    match: false\n  },\n  {\n    glyph: 'tube',\n    match: false\n  },\n  {\n    glyph: 'magnet',\n    match: false\n  },\n  {\n    glyph:'bolt',\n    match: false\n  },\n  {\n    glyph:'star',\n    match: false\n  },\n  {\n    glyph:'stache',\n    match: false\n  },\n  {\n    glyph:'penguin',\n    match: false\n  }\n]","import { action, observable, decorate }    from \"mobx\";\nimport _                                   from 'lodash'\nimport glyphs                              from './glyphs'\n\nclass MainStore {\n\n\t// first half of glyphs, duped for matching purposes\n\teasyGlyphs = [...glyphs.slice(0, (glyphs.length / 2)), ...glyphs.slice(0, (glyphs.length / 2))];\n\n\t// all glyphs, duped for matching purposes\n\thardGlyphs = [...glyphs, ...glyphs];\n\n\t// OBSERVABLES\n\tcurrentGlyphs                = _.shuffle(this.easyGlyphs); // start at easy difficulty on initial load\n\tcurrentlyComparing           = false;\n\ttilesSelected                = [];\n\tmoves                        = 0;\n\ttime                         = 0;\n\ttimeInterval                 = null;\n\ttimerStarted                 = false;\n\tmatches                      = 0;\n\tallMatched                   = false;\n\tenableDifficultySelection    = true;\n\ttimeStamp                    = Date.now();\n\n\t// ACTIONS\n\n\t// fires when selecting difficulty from the dropdown\n\tinitNewGame = (difficulty = 'easy') => {\n\t\t// reset glyphs\n\t\tthis.currentGlyphs = _.shuffle(difficulty === 'easy' ? this.easyGlyphs : this.hardGlyphs);\n\n\t\t// get new time stamp to assure unique keys\n\t\tthis.timeStamp = Date.now();\n\n\t\t// clear timer\n\t\tclearInterval(this.timeInterval);\n\t\tthis.timerStarted = false;\n\t\tthis.time = 0;\n\n\t\t// reset moves and current matches\n\t\tthis.allMatched = false;\n\t\tthis.matches = 0;\n\t\tthis.moves = 0;\n\n\t}\n\n\t// fires when all matches are made\n\tgameWon = () => {\n\t\t// all tiles matched, hook to trigger canvas animation\n\t\tthis.allMatched = true;\n\n\t\t// freeze timer, but leave time as is so user can see how long it took\n\t\tthis.timerStarted = false;\n\t\tclearInterval(this.timeInterval);\n\n\t\t// re-enable difficulty selector\n\t\tthis.enableDifficultySelection = true;\n\t}\n\n\t// start the game timer\n\tstartTimer = () => {\n\t\tthis.timerStarted = true;\n\t\tthis.enableDifficultySelection = false;\n\t\tthis.timeInterval = setInterval(() => {\n\t\t\tthis.time++\n\t\t}, 1000);\n\t}\n\n\t// fire on tile selection\n\tselectTile = (selectedGlyph) => {\n\t\tif (!this.timerStarted){\n\t\t\tthis.startTimer();\n\t\t}\n\t\t\n\t\t// increase by 0.5, since 2 tiles flips is actually 1 move\n\t\tthis.moves += 0.5;\n\n\t\t// push selected glyph only if there are less than 2 already being compared\n\t\tif (this.tilesSelected.length < 2){\n\t\t\tthis.tilesSelected.push(selectedGlyph);\n\t\t}\n\n\t\t// ready to compare if 2 have been selected\n\t\tif (this.tilesSelected.length === 2) {\n\n\t\t\t// freeze further clicks while comparing\n\t\t\tthis.currentlyComparing = true;\n\n\t\t\t// if match found\n\t\t\tif (this.tilesSelected[0] === this.tilesSelected[1]){\n\n\t\t\t\t// mutate shuffled array for re-render\n\t\t\t\t_.delay(() => {\n\t\t\t\t\tthis.currentGlyphs.forEach((item,idx) => {\n\t\t\t\t\t\tif (item.glyph === selectedGlyph){\n\t\t\t\t\t\t\tthis.currentGlyphs[idx].match = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// clear compare array for next comparison\n\t\t\t\t\tthis.tilesSelected = [];\n\n\t\t\t\t\t// save match count\n\t\t\t\t\tthis.matches++;\n\n\t\t\t\t\tif (this.matches === this.currentGlyphs.length / 2){\n\t\t\t\t\t\tthis.gameWon();\n\t\t\t\t\t}\n\n\t\t\t\t\t// unfreeze interaction\n\t\t\t\t\tthis.currentlyComparing = false;\n\n\t\t\t\t}, 400);\n\n\t\t\t}\n\n\t\t\t// no match found, reset everything\n\t\t\telse {\n\t\t\t\t_.delay(() => {\n\t\t\t\t\tthis.currentlyComparing = false;\n\t\t\t\t\tthis.tilesSelected = [];\n\t\t\t\t}, 1400);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n\ndecorate(MainStore, {\n\tcurrentGlyphs:              observable,\n\tmoves:                      observable,\n\ttime:                       observable,\n\tcurrentlyComparing:         observable,\n\tallMatched:                 observable,\n\tenableDifficultySelection:  observable,\n\ttoggleText:                 action,\n\tinitNewGame:                action\n});\n\nexport default new MainStore();\n","import React, { Component } from 'react'\nimport { inject, observer }  from 'mobx-react'\n\nclass Timer extends Component {\n\n  min = 0;\n  sec = 0;\n\n  convertTime(seconds) {\n    // every 60 seconds, reset seconds to 0 and increment minutes by 1\n    if (seconds % 60 === 0 && seconds > 0){\n      this.min++\n      this.sec = 0;\n    }\n\n    // otherwise, just count up to 60\n    else {\n      this.sec = seconds % 60\n    }\n\n    return `${this.min}:${this.sec < 10 ? '0' + this.sec : this.sec}`\n  }\n\n  render(){\n    return (\n      <div className=\"timer\">{this.convertTime(this.props.MainStore.time)}</div>\n    )\n  }\n}\n\nTimer = inject('MainStore')(observer(Timer));\n\nexport default Timer","import React, { Component }   from 'react'\nimport { inject, observer }   from 'mobx-react'\n\nclass Select extends Component {\n\n  state = {\n    value: 'easy'\n  }\n\n  handleChange = (e) => {\n    let value = e.target.value;\n    if (value !== 'select'){\n      this.setState({ value }, () => {\n        this.props.MainStore.initNewGame(value);\n      });\n    }\n  }\n\n  render(){\n    const { MainStore } = this.props\n    return (\n      <div className=\"difficulty\">\n        <select disabled={!MainStore.enableDifficultySelection} onChange={this.handleChange} value={this.state.value}>\n          <option value={'select'}>Select Difficulty</option>\n          <option value={'easy'}>Easy Mode</option>\n          <option value={'hard'}>Hard Mode</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nSelect = inject('MainStore')(observer(Select));\n\nexport default Select","import React, { Component }   from 'react'\nimport { inject, observer }   from 'mobx-react'\nimport Timer                  from './Timer'\nimport Select                 from './Select'\n\nclass TopBar extends Component {\n\n  render(){\n    const { MainStore } = this.props\n    return (\n      <div className=\"top-bar\">\n        <Timer />\n        <div className=\"moves\">Moves: {Math.floor(MainStore.moves)}</div>\n        <Select />\n        <p className=\"title\">Memory</p>\n      </div>\n    )\n  }\n}\n\nTopBar = inject('MainStore')(observer(TopBar));\n\nexport default TopBar","import React, { Component } from 'react'\nimport { inject, observer }  from 'mobx-react'\n\nclass Tile extends Component {\n\n  state = {\n    revealed: false\n  }\n\n  reveal = () => {\n    // disallow interaction when flipped (let the timer take care of it)\n    if (this.state.revealed) { return }\n\n    this.setState((prevState, props) => ({\n      revealed: !prevState.revealed\n    }), () => {\n      // if tile is showing, check for a match\n      if (this.state.revealed){\n        this.props.MainStore.selectTile(this.props.glyph);\n      }\n    });\n  }\n\n  componentDidUpdate(){\n    if (this.props.hiderevealed && this.state.revealed && !this.props.match){\n      setTimeout( () => {\n        this.setState({revealed: false});\n      }, 1200);\n    }\n  }\n\n  render(){\n    return (\n      <div className={`tile${this.state.revealed ? ' reveal' : ''}${this.props.match ? ' match' : ''}`} onClick={this.reveal}>\n        <div className=\"inner\">\n          <span className={`icon-${this.props.glyph} card`}></span>\n        </div>\n      </div>\n    )\n  }\n}\n\nTile = inject('MainStore')(observer(Tile));\n\nexport default Tile","import React, { Component }   from 'react'\nimport { inject, observer }   from 'mobx-react'\nimport TopBar                 from './TopBar'\nimport Tile                   from './Tile'\nimport _                      from 'lodash'\n\nclass GameBoard extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.el = null;\n\t}\n\n\tstate = {\n\t\txDir: null,\n\t\tyDir: null\n\t}\n\n\tcenterX = null\n\tcenterY = null\n\t\n\tgetMouseData = (e) => {\n\t\tthis.setState({\n\t\t\txDir: (e.clientX - this.centerX)/22,\n\t\t\tyDir: (e.clientY - this.centerY)/22\n\t\t});\n\t}\n\n\tcomputePosition = () => {\n\t\tlet transform = `perspective(1000px) translate3d(0,5%,10px) rotateY(${-this.state.xDir}deg) rotateX(${this.state.yDir}deg)`;\n\t\treturn { transform }\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.centerX = this.el.offsetLeft + this.el.clientWidth / 2;\n\t\tthis.centerY = this.el.offsetTop + this.el.clientHeight / 2;\n\t\tthis.el.addEventListener('mousemove', _.throttle(this.getMouseData, 100));\n\t}\n\n\trender(){\n\t\tconst { MainStore } = this.props;\n\t\treturn (\n\t\t\t<div className=\"game-board\" ref={div => this.el = div} style={this.computePosition()}>\n\t\t\t\t{MainStore.allMatched && <p>Congrats!</p>}\n\t\t\t\t<TopBar />\n\t\t\t\t<div className={`tile-set${MainStore.currentlyComparing ? ' no-click' : ''}`}>\n\t\t\t\t\t{MainStore.currentGlyphs.map((glyphObj, idx) => (\n\t\t\t\t\t\t<Tile key={`${glyphObj.glyph}${idx}${MainStore.timeStamp}`} glyph={glyphObj.glyph} match={glyphObj.match} hiderevealed={MainStore.currentlyComparing} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nGameBoard = inject('MainStore')(observer(GameBoard));\n\nexport default GameBoard","import React, { Component } from 'react';\nimport GameBoard from './components/GameBoard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <GameBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React                  from 'react';\nimport ReactDOM               from 'react-dom';\nimport { Provider }           from \"mobx-react\";\nimport MainStore              from './stores/MainStore';\nimport App                    from './App';\nimport * as serviceWorker     from './serviceWorker';\n\nimport './index.css';\n\nconst Root = (\n  <Provider MainStore={MainStore}>\n\t\t<App />\n\t</Provider>\n)\n\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}